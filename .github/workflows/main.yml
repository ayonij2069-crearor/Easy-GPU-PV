name: GPU RDP VM with Roblox

on:
  workflow_dispatch:

jobs:
  gpu-rdp-roblox:
    runs-on: self-hosted
    timeout-minutes: 360
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup VM
        shell: powershell
        run: |
          $VMName = "GPU-VM"
          $VHDPath = "C:\HyperV\$VMName.vhdx"
          $ISOPath = "C:\ISO\Windows.iso"
          $Memory = 8GB
          $CPU = 2
          $VHDSize = 200GB

          dism.exe /Online /Enable-Feature:Microsoft-Hyper-V /All

          if (Get-VM -Name $VMName -ErrorAction SilentlyContinue) {
              Stop-VM -Name $VMName -Force -ErrorAction SilentlyContinue
              Remove-VM -Name $VMName -Force -ErrorAction SilentlyContinue
              Remove-Item -Path $VHDPath -Force -ErrorAction SilentlyContinue
          }

          New-VM -Name $VMName -MemoryStartupBytes $Memory -Generation 2 -NewVHDPath $VHDPath -NewVHDSizeBytes $VHDSize
          Set-VMProcessor -VMName $VMName -Count $CPU
          Set-VMDvdDrive -VMName $VMName -Path $ISOPath
          Start-VM -Name $VMName

          if (Test-Path "./Easy-GPU-PV/Easy-GPU-PV.ps1") {
              pwsh ./Easy-GPU-PV/Easy-GPU-PV.ps1 -VMName $VMName -ISOPath $ISOPath
          }

          Start-Sleep -Seconds 20

      - name: Configure RDP
        shell: powershell
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale" -ErrorAction SilentlyContinue
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create RDP user
        shell: powershell
        run: |
          $securePass = ConvertTo-SecureString "@ayonij123" -AsPlainText -Force
          if (-not (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
              Add-LocalGroupMember -Group "Administrators" -Member "RDP"
              Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          } else {
              (Get-LocalUser -Name "RDP") | Set-LocalUser -Password $securePass
          }
          echo "RDP_CREDS=User: RDP | Password: @ayonij123" >> $env:GITHUB_ENV
          echo "RDP_PASSWORD=@ayonij123" >> $env:GITHUB_ENV

      - name: Install Tailscale
        shell: powershell
        run: |
          $tsPath = "$env:ProgramFiles\Tailscale\tailscale.exe"
          if (-not (Test-Path $tsPath)) {
              $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
              $installerPath = "$env:TEMP\tailscale.msi"
              Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
              Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
              Remove-Item $installerPath -Force
          }

      - name: Connect Tailscale
        shell: powershell
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 12) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          if (-not $tsIP) { Write-Error "Tailscale IP not assigned"; exit 1 }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          Write-Host "Tailscale IP: $tsIP"

      - name: Verify RDP
        shell: powershell
        run: |
          $test = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $test.TcpTestSucceeded) { Write-Error "TCP 3389 failed"; exit 1 }
          Write-Host "RDP reachable via Tailscale IP."

      - name: Force-start Roblox if present
        shell: powershell
        run: |
          $RobloxPlayerExe = (Get-ChildItem -Path "$env:LOCALAPPDATA\Roblox" -Recurse -Filter "RobloxPlayerBeta.exe" -ErrorAction SilentlyContinue | Select-Object -First 1)
          if ($RobloxPlayerExe) {
              Start-Process -FilePath $RobloxPlayerExe.FullName -WorkingDirectory (Split-Path $RobloxPlayerExe.FullName)
          }

      - name: Keep job alive and show RDP info
        shell: powershell
        run: |
          Write-Host ""
          Write-Host "=== RDP ACCESS ==="
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: @ayonij123"
          Write-Host "=================="
          while ($true) {
              Write-Host "Job active at: $(Get-Date)"
              Start-Sleep -Seconds 60
          }
