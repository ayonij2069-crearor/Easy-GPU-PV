name: GPU RDP VM with Roblox (Fixed for Cloud)

on:
  workflow_dispatch:

jobs:
  gpu-rdp-roblox:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      # Ensure Hyper-V and VM base setup
      - name: Setup VM
        shell: pwsh
        run: |
          $VMName = "GPU-VM"
          $VHDPath = "C:\HyperV\$VMName.vhdx"
          $ISOPath = "C:\ISO\Windows.iso"
          $Memory = 8GB
          $CPU = 2
          $VHDSize = 200GB

          dism.exe /Online /Enable-Feature:Microsoft-Hyper-V /All

          if (Get-VM -Name $VMName -ErrorAction SilentlyContinue) {
              Stop-VM -Name $VMName -Force -ErrorAction SilentlyContinue
              Remove-VM -Name $VMName -Force -ErrorAction SilentlyContinue
              Remove-Item -Path $VHDPath -Force -ErrorAction SilentlyContinue
          }

          New-VM -Name $VMName -MemoryStartupBytes $Memory -Generation 2 -NewVHDPath $VHDPath -NewVHDSizeBytes $VHDSize
          Set-VMProcessor -VMName $VMName -Count $CPU
          if (Test-Path $ISOPath) {
              Set-VMDvdDrive -VMName $VMName -Path $ISOPath
          } else {
              Write-Host "⚠️ ISO not found at $ISOPath — skipping DVD attach."
          }
          Start-VM -Name $VMName
          Start-Sleep -Seconds 20

      # Fix for missing Easy-GPU-PV module
      - name: Ensure Easy-GPU-PV Module
        shell: pwsh
        run: |
          $modulePath = Join-Path $env:GITHUB_WORKSPACE "Easy-GPU-PV"
          if (-not (Test-Path $modulePath)) {
              Write-Host "Downloading Easy-GPU-PV..."
              Invoke-WebRequest -Uri "https://github.com/jamesstringerparsec/Easy-GPU-PV/archive/refs/heads/master.zip" -OutFile "Easy-GPU-PV.zip"
              Expand-Archive "Easy-GPU-PV.zip" -DestinationPath "$env:GITHUB_WORKSPACE"
              Rename-Item "$env:GITHUB_WORKSPACE/Easy-GPU-PV-master" $modulePath
          } else {
              Write-Host "Easy-GPU-PV already present."
          }

      # Copy GPU partition files to VM
      - name: Copy GPU Files to VM
        shell: pwsh
        run: |
          $VMName = "GPU-VM"
          $GPUName = "AUTO"
          $Hostname = $env:COMPUTERNAME
          $moduleFile = Join-Path $env:GITHUB_WORKSPACE "Easy-GPU-PV/Add-VMGpuPartitionAdapterFiles.psm1"
          if (-not (Test-Path $moduleFile)) {
              Write-Host "⚠️ GPU module not found at $moduleFile, skipping GPU setup."
              exit 0
          }

          Import-Module $moduleFile -Force
          $VM = Get-VM -VMName $VMName
          $VHD = Get-VHD -VMId $VM.VMId

          $stateWasRunning = $false
          if ($VM.State -eq "Running") { $stateWasRunning = $true }

          if ($VM.State -ne "Off") {
              Write-Host "Attempting to shutdown VM..."
              Stop-VM -Name $VMName -Force
          }

          while ((Get-VM -Name $VMName).State -ne "Off") {
              Start-Sleep -Seconds 3
              Write-Host "Waiting for VM to shutdown..."
          }

          Write-Host "Mounting VHD..."
          $DriveLetter = (Mount-VHD -Path $VHD.Path -PassThru | Get-Disk | Get-Partition | Get-Volume | Where-Object {$_.DriveLetter} | Select-Object -First 1).DriveLetter
          if (-not $DriveLetter) { Write-Error "Failed to mount VHD"; exit 1 }

          Write-Host "Copying GPU files..."
          Add-VMGpuPartitionAdapterFiles -Hostname $Hostname -DriveLetter $DriveLetter -GPUName $GPUName

          Write-Host "Dismounting VHD..."
          Dismount-VHD -Path $VHD.Path

          if ($stateWasRunning) {
              Write-Host "VM was running before; restarting..."
              Start-VM $VMName
          }

          Write-Host "✅ GPU files copied successfully."

      - name: Configure RDP
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale" -ErrorAction SilentlyContinue
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create RDP user
        shell: pwsh
        run: |
          $user = "RDP"
          $plain = "@ayonij123"
          $secure = ConvertTo-SecureString $plain -AsPlainText -Force
          if (-not (Get-LocalUser -Name $user -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name $user -Password $secure -AccountNeverExpires
              Add-LocalGroupMember -Group "Administrators" -Member $user
              Add-LocalGroupMember -Group "Remote Desktop Users" -Member $user
          } else {
              (Get-LocalUser -Name $user) | Set-LocalUser -Password $secure
          }
          echo "RDP_PASSWORD=$plain" >> $env:GITHUB_ENV

      - name: Install Tailscale
        shell: pwsh
        run: |
          $exe = "$env:ProgramFiles\Tailscale\tailscale.exe"
          if (-not (Test-Path $exe)) {
              Write-Host "Installing Tailscale..."
              $url = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
              $dl = "$env:TEMP\tailscale.msi"
              Invoke-WebRequest -Uri $url -OutFile $dl
              Start-Process msiexec.exe -ArgumentList "/i `"$dl`" /quiet /norestart" -Wait
              Remove-Item $dl -Force
          } else {
              Write-Host "Tailscale already installed."
          }

      - name: Connect Tailscale
        shell: pwsh
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$env:TAILSCALE_AUTH_KEY --hostname="gh-runner-$env:GITHUB_RUN_ID"
          $tsIP = $null
          for ($i=0; $i -lt 12; $i++) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              if ($tsIP) { break }
              Start-Sleep -Seconds 5
          }
          if (-not $tsIP) { Write-Error "No Tailscale IP assigned"; exit 1 }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          Write-Host "Tailscale IP: $tsIP"

      - name: Verify RDP
        shell: pwsh
        run: |
          $test = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $test.TcpTestSucceeded) { Write-Error "TCP 3389 failed"; exit 1 }
          Write-Host "✅ RDP reachable via Tailscale IP."

      - name: Force-start Roblox (VM-aware)
        shell: pwsh
        run: |
          $VMName = "GPU-VM"
          function Start-Roblox {
              Write-Host "Trying to start Roblox..."
              $robloxExe = Get-ChildItem -Path "$env:LOCALAPPDATA\Roblox" -Recurse -Filter "RobloxPlayerBeta.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
              if ($robloxExe) {
                  Start-Process -FilePath $robloxExe.FullName -WorkingDirectory (Split-Path $robloxExe.FullName)
                  Write-Host "✅ Roblox started at: $($robloxExe.FullName)"
              } else {
                  Write-Host "⚠️ Roblox not found on host."
              }
          }
          Start-Roblox

      - name: Keep job alive and show RDP info
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "=== RDP ACCESS ==="
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: @ayonij123"
          Write-Host "=================="
          while ($true) {
              Write-Host "Job alive at: $(Get-Date)"
              Start-Sleep -Seconds 60
          }
