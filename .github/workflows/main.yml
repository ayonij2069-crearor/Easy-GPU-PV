name: GPU Windows VM Setup

on:
  workflow_dispatch:

jobs:
  setup-gpu-vm:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Checkout your repository
        uses: actions/checkout@v4

      - name: Set up PowerShell
        shell: pwsh
        run: |
          Write-Host "PowerShell environment ready."
          Write-Host "Working Directory: $env:GITHUB_WORKSPACE"

      - name: Create VM
        shell: pwsh
        run: |
          Write-Host "Creating GPU VM..."
          $VMName = "GPU-VM"
          New-VM -Name $VMName -MemoryStartupBytes 4GB -Generation 2 -NewVHDPath "$env:GITHUB_WORKSPACE\$VMName.vhdx" -NewVHDSizeBytes 60GB
          Set-VMProcessor -VMName $VMName -Count 4
          Write-Host "‚úÖ VM created successfully."

      - name: Copy GPU Files to VM
        shell: pwsh
        run: |
          $VMName = "GPU-VM"
          $GPUName = "AUTO"
          $Hostname = $env:COMPUTERNAME
          $TargetDir = Join-Path $env:GITHUB_WORKSPACE "Easy-GPU-PV"
          $ModulePath = Join-Path $TargetDir "Add-VMGpuPartitionAdapterFiles.psm1"

          Write-Host "Working directory: $env:GITHUB_WORKSPACE"

          # --- FIX: Clone the Easy-GPU-PV repo into workspace ---
          if (-not (Test-Path $TargetDir)) {
              Write-Host "Cloning Easy-GPU-PV repo into workspace..."
              git clone https://github.com/jamesstringerparsec/Easy-GPU-PV.git $TargetDir
          } else {
              Write-Host "Easy-GPU-PV already exists."
          }

          # --- Verify module file exists ---
          if (-not (Test-Path $ModulePath)) {
              Write-Error "‚ùå GPU module not found at $ModulePath"
              Write-Host "Contents of Easy-GPU-PV folder:"
              Get-ChildItem -Path $TargetDir -Recurse | Select-Object FullName
              exit 1
          }

          # --- Import module safely ---
          Write-Host "‚úÖ Importing module from: $ModulePath"
          Import-Module $ModulePath -Force

          # --- Proceed with GPU partition setup ---
          $VM = Get-VM -VMName $VMName
          $VHD = Get-VHD -VMId $VM.VMId
          $state_was_running = $false
          if ($VM.State -eq "Running") { $state_was_running = $true }

          if ($VM.State -ne "Off") {
              Write-Host "Attempting to shutdown VM..."
              Stop-VM -Name $VMName -Force
          }

          while ((Get-VM -Name $VMName).State -ne "Off") {
              Start-Sleep -Seconds 3
              Write-Host "Waiting for VM to shutdown..."
          }

          Write-Host "Mounting VHD..."
          $DriveLetter = (Mount-VHD -Path $VHD.Path -PassThru | Get-Disk | Get-Partition | Get-Volume | Where-Object {$_.DriveLetter} | Select-Object -First 1).DriveLetter
          
          Write-Host "Copying GPU files..."
          Add-VMGpuPartitionAdapterFiles -Hostname $Hostname -DriveLetter $DriveLetter -GPUName $GPUName
          
          Write-Host "Dismounting VHD..."
          Dismount-VHD -Path $VHD.Path

          if ($state_was_running) {
              Write-Host "VM was running before; starting VM..."
              Start-VM $VMName
          }

          Write-Host "‚úÖ GPU file copy done."

      - name: Final confirmation
        shell: pwsh
        run: |
          Write-Host "üéâ Workflow completed successfully!"
